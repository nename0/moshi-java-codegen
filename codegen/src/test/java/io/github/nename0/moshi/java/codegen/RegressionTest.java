package io.github.nename0.moshi.java.codegen;

import com.google.testing.compile.JavaFileObjects;
import io.github.nename0.moshi.java.codegen.model.PublicMember;
import org.junit.jupiter.api.Test;

import javax.tools.JavaFileObject;
import java.io.IOException;
import java.net.URL;
import java.nio.file.*;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.ArrayList;
import java.util.List;

import static com.google.common.truth.Truth.assert_;
import static com.google.testing.compile.JavaSourceSubjectFactory.javaSource;
import static com.google.testing.compile.JavaSourcesSubjectFactory.javaSources;

/**
 * Regression Test. Checks if the JsonAdapter generated by the test source of the test-adapters subproject are still the same.
 * If this test fails and the changes on the JsonAdapters are expected,
 * use the gradle task updateRegressionTestExpectedOutput
 */
public class RegressionTest {
    @Test
    public void regressionTest() throws Exception {
        Path resourceDirectory = Paths.get(getClass().getClassLoader().getResource("find-me.txt").toURI()).getParent();
        String modelPackage = String.join("/", PublicMember.class.getPackage().getName().split("\\."));
        Path modelSourceDir = resourceDirectory.resolve(modelPackage);
        List<JavaFileObject> modelFiles = new ArrayList<>();
        Files.walkFileTree(modelSourceDir, new SimpleFileVisitor<Path>() {
            @Override
            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                modelFiles.add(JavaFileObjects.forResource(file.toFile().toURI().toURL()));
                return FileVisitResult.CONTINUE;
            }
        });
        Path expectedPath = resourceDirectory.resolve("regression/");
        List<JavaFileObject> expectedJsonAdapters = new ArrayList<>();
        Files.walkFileTree(expectedPath, new SimpleFileVisitor<Path>() {
            @Override
            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
                expectedJsonAdapters.add(JavaFileObjects.forResource(file.toFile().toURI().toURL()));
                return FileVisitResult.CONTINUE;
            }
        });
        JavaFileObject first = expectedJsonAdapters.remove(expectedJsonAdapters.size() - 1);
        JavaFileObject[] rest = expectedJsonAdapters.toArray(new JavaFileObject[0]);
        assert_().about(javaSources())
                .that(modelFiles)
                .processedWith(new JsonClassCodegenProcessor())
                .compilesWithoutError()
                .and()
                .generatesSources(first, rest) // this checks the AST and gives a nice diff is something changed, but does ignore whitespaces
                .and()
                .generatesFiles(first, rest); // this checks byte difference
    }
}
