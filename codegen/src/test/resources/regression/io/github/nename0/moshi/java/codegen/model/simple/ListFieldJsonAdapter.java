// Code generated by moshi-java-codegen. Do not edit.
package io.github.nename0.moshi.java.codegen.model.simple;

import com.squareup.moshi.JsonAdapter;
import com.squareup.moshi.JsonReader;
import com.squareup.moshi.JsonWriter;
import com.squareup.moshi.Moshi;
import com.squareup.moshi.Types;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Override;
import java.lang.SuppressWarnings;
import java.util.Collections;
import java.util.List;

@SuppressWarnings("unused")
public final class ListFieldJsonAdapter extends JsonAdapter<ListField> {
  private static final JsonReader.Options OPTIONS = JsonReader.Options.of("list");

  private final JsonAdapter<List<Integer>> adapter_list;

  public ListFieldJsonAdapter(Moshi moshi) {
    adapter_list = moshi.adapter(Types.newParameterizedType(List.class, Integer.class),
        Collections.emptySet(), "list");
  }

  @Override
  public ListField fromJson(JsonReader reader) throws IOException {
    ListField instance = new ListField();
    reader.beginObject();
    while (reader.hasNext()) {
      int index = reader.selectName(OPTIONS);
      switch (index) {
        case -1:
          reader.skipName();
          reader.skipValue();
          break;
        case 0:
          ((ListField)instance).list = adapter_list.fromJson(reader);
          break;
      }
    }
    reader.endObject();
    return instance;
  }

  @Override
  public void toJson(JsonWriter writer, ListField value) throws IOException {
    writer.beginObject();
    writer.name("list");
    adapter_list.toJson(writer, ((ListField)value).list);
    writer.endObject();
  }
}
