// Code generated by moshi-java-codegen. Do not edit.
package io.github.nename0.moshi.java.codegen.model.simple;

import com.squareup.moshi.JsonAdapter;
import com.squareup.moshi.JsonReader;
import com.squareup.moshi.JsonWriter;
import com.squareup.moshi.Moshi;
import java.io.IOException;
import java.lang.IllegalArgumentException;
import java.lang.Override;
import java.lang.SuppressWarnings;
import java.lang.reflect.Type;
import java.util.Collections;

@SuppressWarnings("unused")
public final class GenericPassThroughJsonAdapter<K> extends JsonAdapter<GenericPassThrough<K>> {
  private static final JsonReader.Options OPTIONS = JsonReader.Options.of("generic");

  private final JsonAdapter<K> adapter_generic;

  public GenericPassThroughJsonAdapter(Moshi moshi, Type[] types) {
    if (types.length != 1) {
      throw new IllegalArgumentException("TypeVariable mismatch: Expecting 1 type(s) for generic type variables [K], but received " + types.length);
    }
    adapter_generic = moshi.adapter(types[0], Collections.emptySet(), "generic");
  }

  @Override
  public GenericPassThrough<K> fromJson(JsonReader reader) throws IOException {
    GenericPassThrough<K> instance = new GenericPassThrough<K>();
    reader.beginObject();
    while (reader.hasNext()) {
      int index = reader.selectName(OPTIONS);
      switch (index) {
        case -1:
          reader.skipName();
          reader.skipValue();
          break;
        case 0:
          ((GenericField<K>)instance).generic = adapter_generic.fromJson(reader);
          break;
      }
    }
    reader.endObject();
    return instance;
  }

  @Override
  public void toJson(JsonWriter writer, GenericPassThrough<K> value) throws IOException {
    writer.beginObject();
    writer.name("generic");
    adapter_generic.toJson(writer, ((GenericField<K>)value).generic);
    writer.endObject();
  }
}
