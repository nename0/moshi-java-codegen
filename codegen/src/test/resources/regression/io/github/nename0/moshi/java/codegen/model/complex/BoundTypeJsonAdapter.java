// Code generated by moshi-java-codegen. Do not edit.
package io.github.nename0.moshi.java.codegen.model.complex;

import com.squareup.moshi.JsonAdapter;
import com.squareup.moshi.JsonReader;
import com.squareup.moshi.JsonWriter;
import com.squareup.moshi.Moshi;
import com.squareup.moshi.Types;
import java.io.IOException;
import java.lang.IllegalArgumentException;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.lang.reflect.Type;
import java.util.Collections;
import java.util.List;

@SuppressWarnings("unused")
public final class BoundTypeJsonAdapter<T> extends JsonAdapter<BoundType<T>> {
  private static final JsonReader.Options OPTIONS = JsonReader.Options.of("list", "otherList");

  private final JsonAdapter<List<? extends GenericInheritanceChain<T>>> adapter_list;

  private final JsonAdapter<List<? super String>> adapter_otherList;

  public BoundTypeJsonAdapter(Moshi moshi, Type[] types) {
    if (types.length != 1) {
      throw new IllegalArgumentException("TypeVariable mismatch: Expecting 1 type(s) for generic type variables [T], but received " + types.length);
    }
    adapter_list = moshi.adapter(Types.newParameterizedType(List.class,
        Types.subtypeOf(Types.newParameterizedType(GenericInheritanceChain.class, types[0]))),
        Collections.emptySet(), "list");
    adapter_otherList = moshi.adapter(Types.newParameterizedType(List.class,
        Types.supertypeOf(String.class)), Collections.emptySet(), "otherList");
  }

  @Override
  public BoundType<T> fromJson(JsonReader reader) throws IOException {
    BoundType<T> instance = new BoundType<T>();
    reader.beginObject();
    while (reader.hasNext()) {
      int index = reader.selectName(OPTIONS);
      switch (index) {
        case -1:
          reader.skipName();
          reader.skipValue();
          break;
        case 0:
          ((BoundType<T>)instance).list = adapter_list.fromJson(reader);
          break;
        case 1:
          ((BoundType<T>)instance).otherList = adapter_otherList.fromJson(reader);
          break;
      }
    }
    reader.endObject();
    return instance;
  }

  @Override
  public void toJson(JsonWriter writer, BoundType<T> value) throws IOException {
    writer.beginObject();
    writer.name("list");
    adapter_list.toJson(writer, ((BoundType<T>)value).list);
    writer.name("otherList");
    adapter_otherList.toJson(writer, ((BoundType<T>)value).otherList);
    writer.endObject();
  }
}
