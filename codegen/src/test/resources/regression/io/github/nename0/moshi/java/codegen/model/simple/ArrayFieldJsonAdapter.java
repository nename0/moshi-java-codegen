// Code generated by moshi-java-codegen. Do not edit.
package io.github.nename0.moshi.java.codegen.model.simple;

import com.squareup.moshi.JsonAdapter;
import com.squareup.moshi.JsonReader;
import com.squareup.moshi.JsonWriter;
import com.squareup.moshi.Moshi;
import com.squareup.moshi.Types;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Collections;

@SuppressWarnings("unused")
public final class ArrayFieldJsonAdapter extends JsonAdapter<ArrayField> {
  private static final JsonReader.Options OPTIONS = JsonReader.Options.of("array");

  private final JsonAdapter<String[]> adapter_array;

  public ArrayFieldJsonAdapter(Moshi moshi) {
    adapter_array = moshi.adapter(Types.arrayOf(String.class), Collections.emptySet(), "array");
  }

  @Override
  public ArrayField fromJson(JsonReader reader) throws IOException {
    ArrayField instance = new ArrayField();
    reader.beginObject();
    while (reader.hasNext()) {
      int index = reader.selectName(OPTIONS);
      switch (index) {
        case -1:
          reader.skipName();
          reader.skipValue();
          break;
        case 0:
          ((ArrayField)instance).array = adapter_array.fromJson(reader);
          break;
      }
    }
    reader.endObject();
    return instance;
  }

  @Override
  public void toJson(JsonWriter writer, ArrayField value) throws IOException {
    writer.beginObject();
    writer.name("array");
    adapter_array.toJson(writer, ((ArrayField)value).array);
    writer.endObject();
  }
}
